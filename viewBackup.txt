def risks_reported(request):
    # Dummy risk_data for demonstration, you should replace this with your actual data
    risk_data = [
        ["", "", "", "", ""],  # Almost Certain (5)
        ["", "", "D3, E10", "E1, E3", ""],  # Likely (4)
        ["A1, B1, B2, C2, C4, D1, D2, D4, E5, E6, E8, E9, E12, E15, E16, E17, E18", "", "", "C3, E2, E4, E7, E11, E13, E14", ""],  # Medium (3)
        ["C1", "", "", "", "E19"],  # Unlikely (2)
        ["", "", "", "", ""],  # Rare (1)
    ]

    # Define the color scale for the heat-map
    colorscale = [
        [0, 'green'],        # Very low (1)
        [0.2, 'yellow'],     # Low (2)
        [0.4, 'orange'],     # Moderate (3)
        [0.6, 'red'],        # High (4)
        [1, 'darkred']       # Very high (5)
    ]

    # Create the heat-map
    fig = go.Figure(data=go.Heatmap(
        z=[[1, 2, 3, 4, 2],
           [1, 4, 3, 2, 5],
           [5, 4, 2, 3, 1],
           [5, 4, 3, 2, 1],
           [5, 4, 3, 2, 1]],
        text=risk_data,
        texttemplate="%{text}",
        textfont={"size": 10},
        colorscale=colorscale,
        showscale=True))

    # Update layout to match the axes labels and title
    fig.update_layout(
        title="Risk Heat-Map showing the Overall Risk Profile for UDSM",
        xaxis=dict(title="Impact", tickvals=[4, 3, 2, 1, 0], ticktext=["Very low (1)", "Low (2)", "Moderate (3)", "High (4)", "Very High (5)"]),
        yaxis=dict(title="Likelihood", tickvals=[0, 1, 2, 3, 4], ticktext=["Rare (1)", "Unlikely (2)", "Medium (3)", "Likely (4)", "Almost Certain (5)"]),
        height=500,  # Adjust height of the heatmap
        width=800,   # Adjust width of the heatmap
    )

    # Convert the figure to HTML and pass it to the template
    chart = fig.to_html(full_html=True, include_plotlyjs=True)

    context = {'chart': chart}
    return render(request, 'risks_reported.html', context)
